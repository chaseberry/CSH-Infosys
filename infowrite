#!/usr/bin/env python

#infowrite
#Original author: Russell Harmon ( russ@csh.rit.edu, rus.har.mn )
#Current maintainer: Josh McSavaney ( mcsaucy@csh.rit.edu )
#A script for writing messages to the sign in a quick and dirty manner

import sys 
from time import sleep
from BetaBrite import *
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-w", "--write-mode", action="append", type="string", dest="writeMode",
	help="""Select the write mode to use.
The possible options are:
[ROTATE]
[HOLD]
[FLASH]
[ROLL UP]
[ROLL DOWN]
[ROLL LEFT]
[ROLL RIGHT]
[WIPE UP]
[WIPE DOWN]
[WIPE LEFT]
[WIPE RIGHT]
[SCROLL]
[AUTOMODE]
[ROLL IN]
[ROLL OUT]
[WIPE IN]
[WIPE OUT]
[COMPRESSED ROTATE]
[EXPLODE]
[CLOCK]
[TWINKLE]
[SPARKLE]
[SNOW]
[INTERLOCK]
[SWITCH]
[SLIDE]
[SPRAY]
[STARBURST]
[WELCOME]
[SLOT MACHINE]
[NEWS FLASH]
[TRUMPET]
[CYCLE COLORS]
[THANK YOU]
[NO SMOKING]
[DONT DRINK AND DRIVE]
[RUNNING ANIMALS OR FISH]
[FIREWORKS]
[BALLOON]
[CHERRY BOMB]""")
parser.add_option("-t", "--text",
	action="append", dest="text", type="string",
	help="The text to print on screen")
parser.add_option("-l", "--label",
	action="store", dest="label", type="string",
	help="The label of the text file you are writing", default="1")
parser.add_option("-a", "--address",
	action="store", dest="address", type="string",
	help="The address of the board to send to. 00 is broadcast.")

(options, args) = parser.parse_args()

def start():
	if not options.address:
		startPacket()
	else:
		startPacket( address = options.address )

if len(sys.argv) == 1:
	print "Re-run the program with -h or --help for usage."
	sys.exit(1)

if len(options.writeMode) != len(options.text):
	print "Options are not ="
	sys.exit(1)

for x in options.writeMode:
	if not x in WRITE_MODES:
		print "Bad mode:", x
		sys.exit(1)

start()
startSpecialFunction()
startMemoryConfig()

addTextConfig( options.label, 1 + sum(len(value) for value in options.text) + ( len( options.writeMode ) * 2 ), "ALL TIMES", "NO TIMES" )
end()
sleep(.2)

start()
startFile( label = options.label )

for x in range( len( options.writeMode ) ):
	addText( text = options.text[x], mode = options.writeMode[x] )

end()
